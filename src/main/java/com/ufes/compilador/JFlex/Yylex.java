package com.ufes.compilador.JFlex;
// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/jflex/simple.flex

/* this is the scanner example from the JLex website
   (with small modifications to make it more readable) */


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Yylex {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\0\1\6\3\0\1\7\1\0\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\11\21\1\22"+
    "\1\23\1\24\1\25\1\26\2\0\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\2\36\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\4\36\1\53\1\0\1\54\1\0\1\36"+
    "\1\0\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\2\36\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\4\36\1\55"+
    "\1\56\1\57\7\0\1\3\252\0\2\60\115\0\1\61"+
    "\u019d\0\1\6\12\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\3\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\2\14\1\15\1\16\1\17"+
    "\1\20\1\21\16\22\1\23\1\24\1\25\2\0\3\1"+
    "\2\0\1\26\1\27\1\0\1\30\1\31\1\32\4\22"+
    "\1\33\2\22\1\0\3\22\1\0\6\22\1\34\2\22"+
    "\1\0\1\34\1\26\2\1\2\35\1\36\6\22\1\0"+
    "\1\22\1\37\1\22\1\37\2\22\1\0\1\22\1\0"+
    "\6\22\1\0\3\22\2\0\4\22\1\0\3\22\1\0"+
    "\1\40\3\22\1\0\2\41\1\42\3\22\1\43\1\22"+
    "\1\0\1\22\1\0\1\22\1\0\1\22\2\0\4\22"+
    "\2\0\1\22\1\44\1\22\1\0\2\22\1\0\1\22"+
    "\1\0\3\22\1\0\1\22\1\0\2\45\1\46\1\0"+
    "\1\47\1\46\4\22\2\0\2\22\1\0\1\50\2\51"+
    "\1\22\1\0\3\22\1\0\2\52\1\0\3\22\2\0"+
    "\1\22\2\53\1\43\1\22\1\0\2\22\2\0\1\43"+
    "\1\22\2\54\1\0\1\55\1\22\1\0\1\56\1\22"+
    "\1\0\1\57\1\22\2\60\1\22\1\0\2\61\1\22"+
    "\1\0\1\22\1\0\2\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\226\0\226\0\226"+
    "\0\226\0\226\0\226\0\226\0\226\0\226\0\226\0\372"+
    "\0\u012c\0\226\0\226\0\u015e\0\226\0\u0190\0\u01c2\0\u01f4"+
    "\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384"+
    "\0\u03b6\0\u03e8\0\u041a\0\u044c\0\226\0\226\0\u02ee\0\u047e"+
    "\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u04e2\0\u04e2"+
    "\0\u05dc\0\226\0\226\0\226\0\u060e\0\u0640\0\u0672\0\u06a4"+
    "\0\u02ee\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802"+
    "\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992"+
    "\0\u09c4\0\u09f6\0\u0a28\0\u0578\0\u0a5a\0\u0a8c\0\226\0\u0abe"+
    "\0\u02ee\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c"+
    "\0\u0c4e\0\u02ee\0\u0c80\0\226\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48"+
    "\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8"+
    "\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068"+
    "\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194\0\u02ee\0\u11c6"+
    "\0\u11f8\0\u122a\0\u125c\0\u02ee\0\226\0\u02ee\0\u128e\0\u12c0"+
    "\0\u12f2\0\u02ee\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e"+
    "\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae"+
    "\0\u15e0\0\u1612\0\u02ee\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c"+
    "\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c"+
    "\0\u02ee\0\226\0\u02ee\0\u18ce\0\u02ee\0\226\0\u1900\0\u1932"+
    "\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u02ee"+
    "\0\u02ee\0\226\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc"+
    "\0\u02ee\0\226\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8"+
    "\0\u1d1a\0\u02ee\0\226\0\226\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2"+
    "\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u02ee\0\226\0\u1edc\0\u02ee"+
    "\0\u1f0e\0\u1f40\0\u02ee\0\u1f72\0\u1fa4\0\226\0\u1fd6\0\u02ee"+
    "\0\226\0\u2008\0\u203a\0\u02ee\0\226\0\u206c\0\u209e\0\u20d0"+
    "\0\u2102\0\u02ee\0\226";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\2\35\1\36\1\37\3\35"+
    "\1\40\1\41\1\42\1\43\2\35\1\44\1\45\1\46"+
    "\1\0\1\47\1\0\1\50\1\51\2\52\1\4\2\52"+
    "\1\53\2\52\1\54\1\52\1\55\4\52\1\56\35\52"+
    "\1\57\1\52\1\60\2\52\1\0\2\3\143\0\1\4"+
    "\57\0\2\61\4\0\56\61\4\0\12\61\2\21\40\61"+
    "\25\0\1\62\1\63\60\0\1\64\54\0\2\35\5\0"+
    "\21\35\1\65\2\35\3\0\1\35\23\0\2\35\5\0"+
    "\14\35\1\66\7\35\3\0\1\35\23\0\2\35\5\0"+
    "\1\67\13\35\1\70\7\35\3\0\1\35\23\0\2\35"+
    "\5\0\4\35\1\71\17\35\3\0\1\35\23\0\2\35"+
    "\5\0\13\35\1\72\4\35\1\73\3\35\3\0\1\35"+
    "\2\0\1\74\20\0\2\35\5\0\1\75\7\35\1\76"+
    "\11\35\1\77\1\35\3\0\1\35\1\0\1\100\21\0"+
    "\2\35\5\0\24\35\3\0\1\35\23\0\2\35\5\0"+
    "\13\35\1\101\10\35\3\0\1\35\23\0\2\35\5\0"+
    "\4\35\1\102\17\35\3\0\1\35\23\0\2\35\5\0"+
    "\1\103\16\35\1\104\4\35\3\0\1\35\23\0\2\35"+
    "\5\0\22\35\1\105\1\35\3\0\1\35\23\0\2\35"+
    "\5\0\4\35\1\106\17\35\3\0\1\35\23\0\2\35"+
    "\5\0\4\35\1\107\17\35\3\0\1\35\23\0\2\35"+
    "\5\0\1\110\3\35\1\111\17\35\3\0\1\35\45\0"+
    "\1\112\52\0\1\113\26\0\2\52\1\0\7\52\1\55"+
    "\4\52\1\56\44\52\1\4\7\52\1\55\4\52\1\56"+
    "\44\52\1\0\7\52\1\114\4\52\1\56\44\52\1\0"+
    "\7\52\1\115\4\52\1\0\44\52\1\0\7\52\1\0"+
    "\4\52\1\116\42\52\20\0\1\117\1\120\60\0\2\35"+
    "\5\0\4\35\1\121\17\35\3\0\1\35\23\0\2\35"+
    "\5\0\14\35\1\122\7\35\3\0\1\35\23\0\2\35"+
    "\5\0\17\35\1\123\4\35\3\0\1\35\23\0\2\35"+
    "\5\0\13\35\1\124\10\35\3\0\1\35\23\0\2\35"+
    "\5\0\16\35\1\125\2\35\1\126\2\35\3\0\1\35"+
    "\23\0\2\35\5\0\2\35\1\127\21\35\3\0\1\35"+
    "\34\0\1\130\50\0\2\35\5\0\2\35\1\131\21\35"+
    "\3\0\1\35\23\0\2\35\5\0\12\35\1\132\11\35"+
    "\3\0\1\35\23\0\2\35\5\0\13\35\1\133\10\35"+
    "\3\0\1\35\44\0\1\134\40\0\2\35\5\0\10\35"+
    "\1\135\10\35\1\136\2\35\3\0\1\35\1\0\1\137"+
    "\21\0\2\35\5\0\10\35\1\140\13\35\3\0\1\35"+
    "\1\0\1\141\21\0\2\35\5\0\17\35\1\142\4\35"+
    "\3\0\1\35\23\0\2\35\5\0\14\35\1\143\7\35"+
    "\3\0\1\35\23\0\2\35\5\0\14\35\1\144\7\35"+
    "\3\0\1\35\23\0\2\35\5\0\1\145\14\35\1\146"+
    "\2\35\1\147\3\35\3\0\1\35\2\0\1\150\20\0"+
    "\2\35\5\0\13\35\1\151\10\35\3\0\1\35\23\0"+
    "\2\35\5\0\17\35\1\152\4\35\3\0\1\35\23\0"+
    "\2\35\5\0\21\35\1\153\2\35\3\0\1\35\42\0"+
    "\1\137\10\0\1\154\7\0\1\137\43\0\1\155\17\0"+
    "\2\52\1\0\7\52\1\115\4\52\1\56\44\52\1\0"+
    "\7\52\1\55\4\52\1\116\42\52\20\0\2\120\60\0"+
    "\2\35\5\0\11\35\1\156\12\35\3\0\1\35\23\0"+
    "\2\35\5\0\1\157\23\35\3\0\1\35\23\0\2\35"+
    "\5\0\20\35\1\160\1\161\2\35\3\0\1\35\2\0"+
    "\1\162\20\0\2\35\5\0\22\35\1\163\1\35\3\0"+
    "\1\35\23\0\2\35\5\0\1\164\23\35\3\0\1\35"+
    "\23\0\2\35\5\0\17\35\1\165\4\35\3\0\1\35"+
    "\51\0\1\166\33\0\2\35\5\0\1\167\23\35\3\0"+
    "\1\35\23\0\2\35\5\0\2\35\1\170\21\35\3\0"+
    "\1\35\23\0\2\35\5\0\2\35\1\171\21\35\3\0"+
    "\1\35\23\0\2\35\5\0\4\35\1\172\17\35\3\0"+
    "\1\35\34\0\1\173\50\0\2\35\5\0\1\174\23\35"+
    "\3\0\1\35\32\0\1\175\52\0\2\35\5\0\4\35"+
    "\1\176\17\35\3\0\1\35\23\0\2\35\5\0\2\35"+
    "\1\177\3\35\1\200\15\35\3\0\1\35\23\0\2\35"+
    "\5\0\2\35\1\201\21\35\3\0\1\35\23\0\2\35"+
    "\5\0\11\35\1\202\12\35\3\0\1\35\23\0\2\35"+
    "\5\0\10\35\1\203\13\35\3\0\1\35\1\0\1\204"+
    "\21\0\2\35\5\0\21\35\1\205\2\35\3\0\1\35"+
    "\53\0\1\206\31\0\2\35\5\0\1\207\23\35\3\0"+
    "\1\35\23\0\2\35\5\0\24\35\3\0\1\35\1\0"+
    "\1\210\21\0\2\35\5\0\14\35\1\211\7\35\3\0"+
    "\1\35\36\0\1\212\55\0\1\213\52\0\2\35\5\0"+
    "\4\35\1\214\17\35\3\0\1\35\23\0\2\35\5\0"+
    "\2\35\1\215\21\35\3\0\1\35\23\0\2\35\5\0"+
    "\21\35\1\216\2\35\3\0\1\35\23\0\2\35\5\0"+
    "\10\35\1\217\13\35\3\0\1\35\1\0\1\220\51\0"+
    "\1\221\31\0\2\35\5\0\1\222\23\35\3\0\1\35"+
    "\23\0\2\35\5\0\14\35\1\223\7\35\3\0\1\35"+
    "\23\0\2\35\5\0\4\35\1\224\17\35\3\0\1\35"+
    "\36\0\1\225\46\0\2\35\5\0\1\226\23\35\3\0"+
    "\1\35\23\0\2\35\5\0\10\35\1\227\13\35\3\0"+
    "\1\35\1\0\1\230\21\0\2\35\5\0\10\35\1\231"+
    "\13\35\3\0\1\35\1\0\1\232\40\0\1\230\20\0"+
    "\1\230\21\0\2\35\5\0\4\35\1\233\17\35\3\0"+
    "\1\35\23\0\2\35\5\0\17\35\1\234\4\35\3\0"+
    "\1\35\23\0\2\35\5\0\10\35\1\235\13\35\3\0"+
    "\1\35\1\0\1\236\21\0\2\35\5\0\21\35\1\237"+
    "\2\35\3\0\1\35\53\0\1\240\31\0\2\35\5\0"+
    "\14\35\1\241\7\35\3\0\1\35\46\0\1\242\36\0"+
    "\2\35\5\0\14\35\1\243\7\35\3\0\1\35\32\0"+
    "\1\244\52\0\2\35\5\0\17\35\1\245\4\35\3\0"+
    "\1\35\42\0\1\232\20\0\1\232\44\0\1\246\36\0"+
    "\2\35\5\0\1\247\23\35\3\0\1\35\23\0\2\35"+
    "\5\0\21\35\1\250\2\35\3\0\1\35\23\0\2\35"+
    "\5\0\1\251\23\35\3\0\1\35\23\0\2\35\5\0"+
    "\13\35\1\252\10\35\3\0\1\35\45\0\1\253\46\0"+
    "\1\254\52\0\2\35\5\0\13\35\1\255\10\35\3\0"+
    "\1\35\23\0\2\35\5\0\23\35\1\256\3\0\1\35"+
    "\55\0\1\257\27\0\2\35\5\0\14\35\1\260\7\35"+
    "\3\0\1\35\23\0\2\35\5\0\14\35\1\261\7\35"+
    "\3\0\1\35\46\0\1\262\36\0\2\35\5\0\17\35"+
    "\1\263\4\35\3\0\1\35\51\0\1\264\33\0\2\35"+
    "\5\0\3\35\1\265\20\35\3\0\1\35\23\0\2\35"+
    "\5\0\1\266\23\35\3\0\1\35\23\0\2\35\5\0"+
    "\4\35\1\267\17\35\3\0\1\35\36\0\1\270\46\0"+
    "\2\35\5\0\1\271\23\35\3\0\1\35\32\0\1\272"+
    "\104\0\1\273\27\0\2\35\5\0\13\35\1\263\10\35"+
    "\3\0\1\35\23\0\2\35\5\0\4\35\1\274\17\35"+
    "\3\0\1\35\23\0\2\35\5\0\13\35\1\275\10\35"+
    "\3\0\1\35\23\0\2\35\5\0\22\35\1\276\1\35"+
    "\3\0\1\35\54\0\1\277\52\0\1\300\37\0\2\35"+
    "\5\0\21\35\1\301\2\35\3\0\1\35\23\0\2\35"+
    "\5\0\1\302\23\35\3\0\1\35\32\0\1\303\52\0"+
    "\2\35\5\0\14\35\1\202\7\35\3\0\1\35\46\0"+
    "\1\304\36\0\2\35\5\0\10\35\1\305\13\35\3\0"+
    "\1\35\1\0\1\306\21\0\2\35\5\0\12\35\1\307"+
    "\11\35\3\0\1\35\23\0\2\35\5\0\13\35\1\310"+
    "\10\35\3\0\1\35\45\0\1\311\52\0\1\312\46\0"+
    "\2\35\5\0\17\35\1\313\4\35\3\0\1\35\23\0"+
    "\2\35\5\0\21\35\1\314\2\35\3\0\1\35\23\0"+
    "\2\35\5\0\1\315\23\35\3\0\1\35\32\0\1\316"+
    "\102\0\1\317\31\0\2\35\5\0\14\35\1\320\7\35"+
    "\3\0\1\35\23\0\2\35\5\0\12\35\1\321\11\35"+
    "\3\0\1\35\44\0\1\322\40\0\2\35\5\0\1\323"+
    "\23\35\3\0\1\35\23\0\2\35\5\0\21\35\1\324"+
    "\2\35\3\0\1\35\53\0\1\325\51\0\1\326\41\0"+
    "\2\35\5\0\4\35\1\327\17\35\3\0\1\35\23\0"+
    "\2\35\5\0\4\35\1\330\17\35\3\0\1\35\36\0"+
    "\1\331\46\0\2\35\5\0\4\35\1\332\17\35\3\0"+
    "\1\35\36\0\1\333\46\0\2\35\5\0\4\35\1\334"+
    "\17\35\3\0\1\35\36\0\1\335\46\0\2\35\5\0"+
    "\20\35\1\202\3\35\3\0\1\35\2\0\1\304\20\0"+
    "\2\35\5\0\13\35\1\336\10\35\3\0\1\35\45\0"+
    "\1\337\37\0\2\35\5\0\21\35\1\340\2\35\3\0"+
    "\1\35\53\0\1\341\31\0\2\35\5\0\14\35\1\342"+
    "\7\35\3\0\1\35\46\0\1\343\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8500];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\1\1\12\11\2\1\2\11\1\1"+
    "\1\11\17\1\2\11\1\1\2\0\3\1\2\0\2\1"+
    "\1\0\3\11\7\1\1\0\3\1\1\0\11\1\1\0"+
    "\4\1\1\11\10\1\1\0\3\1\1\11\2\1\1\0"+
    "\1\1\1\0\6\1\1\0\3\1\2\0\4\1\1\0"+
    "\3\1\1\0\4\1\1\0\1\1\1\11\6\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\2\0\4\1\2\0"+
    "\3\1\1\0\2\1\1\0\1\1\1\0\3\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1\1\0\1\1\1\11"+
    "\4\1\2\0\2\1\1\0\2\1\1\11\1\1\1\0"+
    "\3\1\1\0\1\1\1\11\1\0\3\1\2\0\2\1"+
    "\2\11\1\1\1\0\2\1\2\0\3\1\1\11\1\0"+
    "\2\1\1\0\2\1\1\0\1\11\2\1\1\11\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  private int comment_count = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }
  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [62] {  }");
            { 
            }
            // fall through
          case 51: break;
          case 2:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [66] { return (new Yytoken(yytext(),yyline,\"TKN_aspas\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_aspas"));
            }
            // fall through
          case 52: break;
          case 3:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [60] { return (new Yytoken(yytext(),yyline,\"TKN_eComercial\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_eComercial"));
            }
            // fall through
          case 53: break;
          case 4:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [45] { return (new Yytoken(yytext(),yyline,\"TKN_abreParenteses\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_abreParenteses"));
            }
            // fall through
          case 54: break;
          case 5:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [46] { return (new Yytoken(yytext(),yyline,\"TKN_fechaParenteses\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_fechaParenteses"));
            }
            // fall through
          case 55: break;
          case 6:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [52] { return (new Yytoken(yytext(),yyline,\"TKN_asterisco\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_asterisco"));
            }
            // fall through
          case 56: break;
          case 7:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [50] { return (new Yytoken(yytext(),yyline,\"TKN_mais\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_mais"));
            }
            // fall through
          case 57: break;
          case 8:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [42] { return (new Yytoken(yytext(),yyline,\"TKN_virgula\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_virgula"));
            }
            // fall through
          case 58: break;
          case 9:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [51] { return (new Yytoken(yytext(),yyline,\"TKN_hifen\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_hifen"));
            }
            // fall through
          case 59: break;
          case 10:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [49] { return (new Yytoken(yytext(),yyline,\"TKN_ponto\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_ponto"));
            }
            // fall through
          case 60: break;
          case 11:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [53] { return (new Yytoken(yytext(),yyline,\"TKN_barra\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_barra"));
            }
            // fall through
          case 61: break;
          case 12:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [97] { return (new Yytoken(yytext(),yyline,\"TKN_tipoInteiro\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_tipoInteiro"));
            }
            // fall through
          case 62: break;
          case 13:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [43] { return (new Yytoken(yytext(),yyline,\"TKN_doisPontos\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_doisPontos"));
            }
            // fall through
          case 63: break;
          case 14:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [44] { return (new Yytoken(yytext(),yyline,\"TKN_pontoEvirgula\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_pontoEvirgula"));
            }
            // fall through
          case 64: break;
          case 15:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [56] { return (new Yytoken(yytext(),yyline,\"TKN_menor\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_menor"));
            }
            // fall through
          case 65: break;
          case 16:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [54] { return (new Yytoken(yytext(),yyline,\"TKN_igual\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_igual"));
            }
            // fall through
          case 66: break;
          case 17:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [58] { return (new Yytoken(yytext(),yyline,\"TKN_maior\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_maior"));
            }
            // fall through
          case 67: break;
          case 18:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [96] { return (new Yytoken(yytext(),yyline,\"TKN_identificador\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_identificador"));
            }
            // fall through
          case 68: break;
          case 19:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [47] { return (new Yytoken(yytext(),yyline,\"TKN_abreColchetes\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_abreColchetes"));
            }
            // fall through
          case 69: break;
          case 20:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [48] { return (new Yytoken(yytext(),yyline,\"TKN_fechaColchetes\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_fechaColchetes"));
            }
            // fall through
          case 70: break;
          case 21:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [61] { return (new Yytoken(yytext(),yyline,\"TKN_barraVertical\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_barraVertical"));
            }
            // fall through
          case 71: break;
          case 22:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [103] { comment_count++; }");
            { comment_count++;
            }
            // fall through
          case 72: break;
          case 23:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [104] { if (--comment_count == 0) yybegin(YYINITIAL); }");
            { if (--comment_count == 0) yybegin(YYINITIAL);
            }
            // fall through
          case 73: break;
          case 24:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [57] { return (new Yytoken(yytext(),yyline,\"TKN_menorOuIgual\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_menorOuIgual"));
            }
            // fall through
          case 74: break;
          case 25:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [55] { return (new Yytoken(yytext(),yyline,\"TKN_diferente\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_diferente"));
            }
            // fall through
          case 75: break;
          case 26:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [59] { return (new Yytoken(yytext(),yyline,\"TKN_maiorOuIgual\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_maiorOuIgual"));
            }
            // fall through
          case 76: break;
          case 27:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [87] { return (new Yytoken(yytext(),yyline,\"TKN_associaVetorATipo\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_associaVetorATipo"));
            }
            // fall through
          case 77: break;
          case 28:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [70] { return (new Yytoken(yytext(),yyline,\"TKN_se\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_se"));
            }
            // fall through
          case 78: break;
          case 29:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [99] { return (new Yytoken(yytext(),yyline,\"TKN_tipoReal\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_tipoReal"));
            }
            // fall through
          case 79: break;
          case 30:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [76] { return (new Yytoken(yytext(),yyline,\"TKN_ate\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_ate"));
            }
            // fall through
          case 80: break;
          case 31:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [91] { return (new Yytoken(yytext(),yyline,\"TKN_terminaBloco\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_terminaBloco"));
            }
            // fall through
          case 81: break;
          case 32:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [74] { return (new Yytoken(yytext(),yyline,\"TKN_faca\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_faca"));
            }
            // fall through
          case 82: break;
          case 33:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [79] { return (new Yytoken(yytext(),yyline,\"TKN_leia\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_leia"));
            }
            // fall through
          case 83: break;
          case 34:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [77] { return (new Yytoken(yytext(),yyline,\"TKN_pare\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_pare"));
            }
            // fall through
          case 84: break;
          case 35:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [95] { return (new Yytoken(yytext(),yyline,\"TKN_tipoVariavel\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_tipoVariavel"));
            }
            // fall through
          case 85: break;
          case 36:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [71] { return (new Yytoken(yytext(),yyline,\"TKN_entao\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_entao"));
            }
            // fall through
          case 86: break;
          case 37:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [69] { return (new Yytoken(yytext(),yyline,\"TKN_resto\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_resto"));
            }
            // fall through
          case 87: break;
          case 38:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [72] { return (new Yytoken(yytext(),yyline,\"TKN_senao\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_senao"));
            }
            // fall through
          case 88: break;
          case 39:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [86] { return (new Yytoken(yytext(),yyline,\"TKN_declaraVetor\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_declaraVetor"));
            }
            // fall through
          case 89: break;
          case 40:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [83] { return (new Yytoken(yytext(),yyline,\"TKN_declarafuncao\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_declarafuncao"));
            }
            // fall through
          case 90: break;
          case 41:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [90] { return (new Yytoken(yytext(),yyline,\"TKN_iniciaBloco\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_iniciaBloco"));
            }
            // fall through
          case 91: break;
          case 42:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [75] { return (new Yytoken(yytext(),yyline,\"TKN_repita\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_repita"));
            }
            // fall through
          case 92: break;
          case 43:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [80] { return (new Yytoken(yytext(),yyline,\"TKN_escreva\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_escreva"));
            }
            // fall through
          case 93: break;
          case 44:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [78] { return (new Yytoken(yytext(),yyline,\"TKN_continua\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_continua"));
            }
            // fall through
          case 94: break;
          case 45:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [73] { return (new Yytoken(yytext(),yyline,\"TKN_enquanto\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_enquanto"));
            }
            // fall through
          case 95: break;
          case 46:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [93] { return (new Yytoken(yytext(),yyline,\"TKN_nomeiaPrograma\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_nomeiaPrograma"));
            }
            // fall through
          case 96: break;
          case 47:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [100] { return (new Yytoken(yytext(),yyline,\"TKN_iniciaVariavel\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_iniciaVariavel"));
            }
            // fall through
          case 97: break;
          case 48:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [94] { return (new Yytoken(yytext(),yyline,\"TKN_iniciaConstante\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_iniciaConstante"));
            }
            // fall through
          case 98: break;
          case 49:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [68] { return (new Yytoken(yytext(),yyline,\"TKN_quociente\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_quociente"));
            }
            // fall through
          case 99: break;
          case 50:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [89] { return (new Yytoken(yytext(),yyline,\"TKN_declaraProcedimento\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_declaraProcedimento"));
            }
            // fall through
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Yylex [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Yylex scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Yylex(reader);
          do {
            System.out.println(scanner.yylex());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
