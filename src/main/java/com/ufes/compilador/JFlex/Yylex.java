package com.ufes.compilador.JFlex;
// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/jflex/simple.flex

/* this is the scanner example from the JLex website
   (with small modifications to make it more readable) */


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Yylex {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\1\2\2\3\1\4\22\0\1\1\1\0"+
    "\1\5\3\0\1\6\1\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\11\20\1\21\1\22"+
    "\1\23\1\24\1\25\2\0\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\2\35\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\4\35\1\52\1\0\1\53\1\0\1\35\1\0"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\2\35\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\4\35\1\54\1\55"+
    "\1\56\7\0\1\3\252\0\2\57\115\0\1\60\u019d\0"+
    "\1\5\12\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\2\14\1\15\1\16\1\17"+
    "\1\20\1\21\16\22\1\23\1\24\1\25\1\26\1\27"+
    "\2\0\3\1\3\0\1\30\1\31\1\32\4\22\1\33"+
    "\2\22\1\0\3\22\1\0\6\22\1\34\2\22\1\0"+
    "\1\34\2\0\1\1\1\35\1\36\1\1\2\37\1\40"+
    "\6\22\1\0\1\22\1\41\1\22\1\41\2\22\1\0"+
    "\1\22\1\0\6\22\1\0\3\22\2\0\4\22\1\0"+
    "\3\22\1\0\1\42\3\22\1\0\2\43\1\44\3\22"+
    "\1\45\1\22\1\0\1\22\1\0\1\22\1\0\1\22"+
    "\2\0\4\22\2\0\1\22\1\46\1\22\1\0\2\22"+
    "\1\0\1\22\1\0\3\22\1\0\1\22\1\0\2\47"+
    "\1\50\1\0\1\51\1\50\4\22\2\0\2\22\1\0"+
    "\1\52\2\53\1\22\1\0\3\22\1\0\2\54\1\0"+
    "\3\22\2\0\1\22\2\55\1\45\1\22\1\0\2\22"+
    "\2\0\1\45\1\22\2\56\1\0\1\57\1\22\1\0"+
    "\1\60\1\22\1\0\1\61\1\22\2\62\1\22\1\0"+
    "\2\63\1\22\1\0\1\22\1\0\2\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\304\0\304\0\304"+
    "\0\304\0\304\0\304\0\304\0\304\0\304\0\365\0\u0126"+
    "\0\304\0\304\0\u0157\0\304\0\u0188\0\u01b9\0\u01ea\0\u021b"+
    "\0\u024c\0\u027d\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3"+
    "\0\u03d4\0\u0405\0\u0436\0\304\0\304\0\304\0\u02df\0\304"+
    "\0\u0467\0\u0498\0\u04c9\0\304\0\u04fa\0\u052b\0\u055c\0\u058d"+
    "\0\304\0\304\0\304\0\u05be\0\u05ef\0\u0620\0\u0651\0\u02df"+
    "\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9"+
    "\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961"+
    "\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\304\0\304\0\u0a87"+
    "\0\304\0\u0ab8\0\u02df\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad"+
    "\0\u0bde\0\u0c0f\0\u0c40\0\u02df\0\u0c71\0\304\0\u0ca2\0\u0cd3"+
    "\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b"+
    "\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3"+
    "\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b"+
    "\0\u02df\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u02df\0\304\0\u02df"+
    "\0\u1260\0\u1291\0\u12c2\0\u02df\0\u12f3\0\u1324\0\u1355\0\u1386"+
    "\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e"+
    "\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u02df\0\u1603\0\u1634\0\u1665"+
    "\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed"+
    "\0\u181e\0\u184f\0\u02df\0\304\0\u02df\0\u1880\0\u02df\0\304"+
    "\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08"+
    "\0\u1a39\0\u02df\0\u02df\0\304\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd"+
    "\0\u1b2e\0\u1b5f\0\u02df\0\304\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23"+
    "\0\u1c54\0\u1c85\0\u1cb6\0\u02df\0\304\0\304\0\u1ce7\0\u1d18"+
    "\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e\0\u02df\0\304"+
    "\0\u1e6f\0\u02df\0\u1ea0\0\u1ed1\0\u02df\0\u1f02\0\u1f33\0\304"+
    "\0\u1f64\0\u02df\0\304\0\u1f95\0\u1fc6\0\u02df\0\304\0\u1ff7"+
    "\0\u2028\0\u2059\0\u208a\0\u02df\0\304";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\2\34\1\35\1\36\3\34\1\37"+
    "\1\40\1\41\1\42\2\34\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\2\53\1\54\1\53\1\55"+
    "\4\53\1\56\4\53\1\57\42\53\1\0\2\3\60\0"+
    "\1\54\137\0\2\60\3\0\56\60\3\0\12\60\2\20"+
    "\40\60\24\0\1\61\1\62\57\0\1\63\53\0\2\34"+
    "\5\0\21\34\1\64\2\34\3\0\1\34\22\0\2\34"+
    "\5\0\14\34\1\65\7\34\3\0\1\34\22\0\2\34"+
    "\5\0\1\66\13\34\1\67\7\34\3\0\1\34\22\0"+
    "\2\34\5\0\4\34\1\70\17\34\3\0\1\34\22\0"+
    "\2\34\5\0\13\34\1\71\4\34\1\72\3\34\3\0"+
    "\1\34\2\0\1\73\17\0\2\34\5\0\1\74\7\34"+
    "\1\75\11\34\1\76\1\34\3\0\1\34\1\0\1\77"+
    "\20\0\2\34\5\0\24\34\3\0\1\34\22\0\2\34"+
    "\5\0\13\34\1\100\10\34\3\0\1\34\22\0\2\34"+
    "\5\0\4\34\1\101\17\34\3\0\1\34\22\0\2\34"+
    "\5\0\1\102\16\34\1\103\4\34\3\0\1\34\22\0"+
    "\2\34\5\0\22\34\1\104\1\34\3\0\1\34\22\0"+
    "\2\34\5\0\4\34\1\105\17\34\3\0\1\34\22\0"+
    "\2\34\5\0\4\34\1\106\17\34\3\0\1\34\22\0"+
    "\2\34\5\0\1\107\3\34\1\110\17\34\3\0\1\34"+
    "\44\0\1\111\51\0\1\112\26\0\2\53\1\0\6\53"+
    "\1\113\4\53\1\114\44\53\1\54\6\53\1\113\4\53"+
    "\1\114\44\53\1\0\6\53\1\115\4\53\1\116\44\53"+
    "\1\0\6\53\1\117\4\53\1\120\42\53\17\0\1\121"+
    "\1\122\57\0\2\34\5\0\4\34\1\123\17\34\3\0"+
    "\1\34\22\0\2\34\5\0\14\34\1\124\7\34\3\0"+
    "\1\34\22\0\2\34\5\0\17\34\1\125\4\34\3\0"+
    "\1\34\22\0\2\34\5\0\13\34\1\126\10\34\3\0"+
    "\1\34\22\0\2\34\5\0\16\34\1\127\2\34\1\130"+
    "\2\34\3\0\1\34\22\0\2\34\5\0\2\34\1\131"+
    "\21\34\3\0\1\34\33\0\1\132\47\0\2\34\5\0"+
    "\2\34\1\133\21\34\3\0\1\34\22\0\2\34\5\0"+
    "\12\34\1\134\11\34\3\0\1\34\22\0\2\34\5\0"+
    "\13\34\1\135\10\34\3\0\1\34\43\0\1\136\37\0"+
    "\2\34\5\0\10\34\1\137\10\34\1\140\2\34\3\0"+
    "\1\34\1\0\1\141\20\0\2\34\5\0\10\34\1\142"+
    "\13\34\3\0\1\34\1\0\1\143\20\0\2\34\5\0"+
    "\17\34\1\144\4\34\3\0\1\34\22\0\2\34\5\0"+
    "\14\34\1\145\7\34\3\0\1\34\22\0\2\34\5\0"+
    "\14\34\1\146\7\34\3\0\1\34\22\0\2\34\5\0"+
    "\1\147\14\34\1\150\2\34\1\151\3\34\3\0\1\34"+
    "\2\0\1\152\17\0\2\34\5\0\13\34\1\153\10\34"+
    "\3\0\1\34\22\0\2\34\5\0\17\34\1\154\4\34"+
    "\3\0\1\34\22\0\2\34\5\0\21\34\1\155\2\34"+
    "\3\0\1\34\41\0\1\141\10\0\1\156\7\0\1\141"+
    "\42\0\1\157\17\0\2\53\1\0\6\53\1\115\4\53"+
    "\1\0\44\53\1\0\6\53\1\0\4\53\1\120\44\53"+
    "\1\0\6\53\1\115\4\53\1\114\44\53\1\0\6\53"+
    "\1\113\4\53\1\120\42\53\17\0\2\122\57\0\2\34"+
    "\5\0\11\34\1\160\12\34\3\0\1\34\22\0\2\34"+
    "\5\0\1\161\23\34\3\0\1\34\22\0\2\34\5\0"+
    "\20\34\1\162\1\163\2\34\3\0\1\34\2\0\1\164"+
    "\17\0\2\34\5\0\22\34\1\165\1\34\3\0\1\34"+
    "\22\0\2\34\5\0\1\166\23\34\3\0\1\34\22\0"+
    "\2\34\5\0\17\34\1\167\4\34\3\0\1\34\50\0"+
    "\1\170\32\0\2\34\5\0\1\171\23\34\3\0\1\34"+
    "\22\0\2\34\5\0\2\34\1\172\21\34\3\0\1\34"+
    "\22\0\2\34\5\0\2\34\1\173\21\34\3\0\1\34"+
    "\22\0\2\34\5\0\4\34\1\174\17\34\3\0\1\34"+
    "\33\0\1\175\47\0\2\34\5\0\1\176\23\34\3\0"+
    "\1\34\31\0\1\177\51\0\2\34\5\0\4\34\1\200"+
    "\17\34\3\0\1\34\22\0\2\34\5\0\2\34\1\201"+
    "\3\34\1\202\15\34\3\0\1\34\22\0\2\34\5\0"+
    "\2\34\1\203\21\34\3\0\1\34\22\0\2\34\5\0"+
    "\11\34\1\204\12\34\3\0\1\34\22\0\2\34\5\0"+
    "\10\34\1\205\13\34\3\0\1\34\1\0\1\206\20\0"+
    "\2\34\5\0\21\34\1\207\2\34\3\0\1\34\52\0"+
    "\1\210\30\0\2\34\5\0\1\211\23\34\3\0\1\34"+
    "\22\0\2\34\5\0\24\34\3\0\1\34\1\0\1\212"+
    "\20\0\2\34\5\0\14\34\1\213\7\34\3\0\1\34"+
    "\35\0\1\214\54\0\1\215\51\0\2\34\5\0\4\34"+
    "\1\216\17\34\3\0\1\34\22\0\2\34\5\0\2\34"+
    "\1\217\21\34\3\0\1\34\22\0\2\34\5\0\21\34"+
    "\1\220\2\34\3\0\1\34\22\0\2\34\5\0\10\34"+
    "\1\221\13\34\3\0\1\34\1\0\1\222\50\0\1\223"+
    "\30\0\2\34\5\0\1\224\23\34\3\0\1\34\22\0"+
    "\2\34\5\0\14\34\1\225\7\34\3\0\1\34\22\0"+
    "\2\34\5\0\4\34\1\226\17\34\3\0\1\34\35\0"+
    "\1\227\45\0\2\34\5\0\1\230\23\34\3\0\1\34"+
    "\22\0\2\34\5\0\10\34\1\231\13\34\3\0\1\34"+
    "\1\0\1\232\20\0\2\34\5\0\10\34\1\233\13\34"+
    "\3\0\1\34\1\0\1\234\37\0\1\232\20\0\1\232"+
    "\20\0\2\34\5\0\4\34\1\235\17\34\3\0\1\34"+
    "\22\0\2\34\5\0\17\34\1\236\4\34\3\0\1\34"+
    "\22\0\2\34\5\0\10\34\1\237\13\34\3\0\1\34"+
    "\1\0\1\240\20\0\2\34\5\0\21\34\1\241\2\34"+
    "\3\0\1\34\52\0\1\242\30\0\2\34\5\0\14\34"+
    "\1\243\7\34\3\0\1\34\45\0\1\244\35\0\2\34"+
    "\5\0\14\34\1\245\7\34\3\0\1\34\31\0\1\246"+
    "\51\0\2\34\5\0\17\34\1\247\4\34\3\0\1\34"+
    "\41\0\1\234\20\0\1\234\43\0\1\250\35\0\2\34"+
    "\5\0\1\251\23\34\3\0\1\34\22\0\2\34\5\0"+
    "\21\34\1\252\2\34\3\0\1\34\22\0\2\34\5\0"+
    "\1\253\23\34\3\0\1\34\22\0\2\34\5\0\13\34"+
    "\1\254\10\34\3\0\1\34\44\0\1\255\45\0\1\256"+
    "\51\0\2\34\5\0\13\34\1\257\10\34\3\0\1\34"+
    "\22\0\2\34\5\0\23\34\1\260\3\0\1\34\54\0"+
    "\1\261\26\0\2\34\5\0\14\34\1\262\7\34\3\0"+
    "\1\34\22\0\2\34\5\0\14\34\1\263\7\34\3\0"+
    "\1\34\45\0\1\264\35\0\2\34\5\0\17\34\1\265"+
    "\4\34\3\0\1\34\50\0\1\266\32\0\2\34\5\0"+
    "\3\34\1\267\20\34\3\0\1\34\22\0\2\34\5\0"+
    "\1\270\23\34\3\0\1\34\22\0\2\34\5\0\4\34"+
    "\1\271\17\34\3\0\1\34\35\0\1\272\45\0\2\34"+
    "\5\0\1\273\23\34\3\0\1\34\31\0\1\274\103\0"+
    "\1\275\26\0\2\34\5\0\13\34\1\265\10\34\3\0"+
    "\1\34\22\0\2\34\5\0\4\34\1\276\17\34\3\0"+
    "\1\34\22\0\2\34\5\0\13\34\1\277\10\34\3\0"+
    "\1\34\22\0\2\34\5\0\22\34\1\300\1\34\3\0"+
    "\1\34\53\0\1\301\51\0\1\302\36\0\2\34\5\0"+
    "\21\34\1\303\2\34\3\0\1\34\22\0\2\34\5\0"+
    "\1\304\23\34\3\0\1\34\31\0\1\305\51\0\2\34"+
    "\5\0\14\34\1\204\7\34\3\0\1\34\45\0\1\306"+
    "\35\0\2\34\5\0\10\34\1\307\13\34\3\0\1\34"+
    "\1\0\1\310\20\0\2\34\5\0\12\34\1\311\11\34"+
    "\3\0\1\34\22\0\2\34\5\0\13\34\1\312\10\34"+
    "\3\0\1\34\44\0\1\313\51\0\1\314\45\0\2\34"+
    "\5\0\17\34\1\315\4\34\3\0\1\34\22\0\2\34"+
    "\5\0\21\34\1\316\2\34\3\0\1\34\22\0\2\34"+
    "\5\0\1\317\23\34\3\0\1\34\31\0\1\320\101\0"+
    "\1\321\30\0\2\34\5\0\14\34\1\322\7\34\3\0"+
    "\1\34\22\0\2\34\5\0\12\34\1\323\11\34\3\0"+
    "\1\34\43\0\1\324\37\0\2\34\5\0\1\325\23\34"+
    "\3\0\1\34\22\0\2\34\5\0\21\34\1\326\2\34"+
    "\3\0\1\34\52\0\1\327\50\0\1\330\40\0\2\34"+
    "\5\0\4\34\1\331\17\34\3\0\1\34\22\0\2\34"+
    "\5\0\4\34\1\332\17\34\3\0\1\34\35\0\1\333"+
    "\45\0\2\34\5\0\4\34\1\334\17\34\3\0\1\34"+
    "\35\0\1\335\45\0\2\34\5\0\4\34\1\336\17\34"+
    "\3\0\1\34\35\0\1\337\45\0\2\34\5\0\20\34"+
    "\1\204\3\34\3\0\1\34\2\0\1\306\17\0\2\34"+
    "\5\0\13\34\1\340\10\34\3\0\1\34\44\0\1\341"+
    "\36\0\2\34\5\0\21\34\1\342\2\34\3\0\1\34"+
    "\52\0\1\343\30\0\2\34\5\0\14\34\1\344\7\34"+
    "\3\0\1\34\45\0\1\345\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8379];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\1\12\11\2\1\2\11\1\1\1\11\17\1"+
    "\3\11\1\1\1\11\2\0\1\1\1\11\1\1\3\0"+
    "\3\11\7\1\1\0\3\1\1\0\11\1\1\0\1\1"+
    "\2\0\1\1\2\11\1\1\1\11\10\1\1\0\3\1"+
    "\1\11\2\1\1\0\1\1\1\0\6\1\1\0\3\1"+
    "\2\0\4\1\1\0\3\1\1\0\4\1\1\0\1\1"+
    "\1\11\6\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\2\0\4\1\2\0\3\1\1\0\2\1\1\0\1\1"+
    "\1\0\3\1\1\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\11\4\1\2\0\2\1\1\0\2\1"+
    "\1\11\1\1\1\0\3\1\1\0\1\1\1\11\1\0"+
    "\3\1\2\0\2\1\2\11\1\1\1\0\2\1\2\0"+
    "\3\1\1\11\1\0\2\1\1\0\2\1\1\0\1\11"+
    "\2\1\1\11\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  private int comment_count = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }
  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [61] {  }");
            { 
            }
            // fall through
          case 53: break;
          case 2:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [64] { return (new Yytoken(yytext(),yyline,\"TKN_aspas\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_aspas"));
            }
            // fall through
          case 54: break;
          case 3:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [59] { return (new Yytoken(yytext(),yyline,\"TKN_eComercial\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_eComercial"));
            }
            // fall through
          case 55: break;
          case 4:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [42] { return (new Yytoken(yytext(),yyline,\"TKN_abreParenteses\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_abreParenteses"));
            }
            // fall through
          case 56: break;
          case 5:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [43] { return (new Yytoken(yytext(),yyline,\"TKN_fechaParenteses\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_fechaParenteses"));
            }
            // fall through
          case 57: break;
          case 6:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [51] { return (new Yytoken(yytext(),yyline,\"TKN_asterisco\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_asterisco"));
            }
            // fall through
          case 58: break;
          case 7:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [49] { return (new Yytoken(yytext(),yyline,\"TKN_mais\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_mais"));
            }
            // fall through
          case 59: break;
          case 8:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [39] { return (new Yytoken(yytext(),yyline,\"TKN_virgula\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_virgula"));
            }
            // fall through
          case 60: break;
          case 9:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [50] { return (new Yytoken(yytext(),yyline,\"TKN_hifen\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_hifen"));
            }
            // fall through
          case 61: break;
          case 10:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [48] { return (new Yytoken(yytext(),yyline,\"TKN_ponto\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_ponto"));
            }
            // fall through
          case 62: break;
          case 11:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [52] { return (new Yytoken(yytext(),yyline,\"TKN_barra\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_barra"));
            }
            // fall through
          case 63: break;
          case 12:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [95] { return (new Yytoken(yytext(),yyline,\"TKN_tipoInteiro\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_tipoInteiro"));
            }
            // fall through
          case 64: break;
          case 13:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [40] { return (new Yytoken(yytext(),yyline,\"TKN_doisPontos\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_doisPontos"));
            }
            // fall through
          case 65: break;
          case 14:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [41] { return (new Yytoken(yytext(),yyline,\"TKN_pontoEvirgula\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_pontoEvirgula"));
            }
            // fall through
          case 66: break;
          case 15:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [55] { return (new Yytoken(yytext(),yyline,\"TKN_menor\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_menor"));
            }
            // fall through
          case 67: break;
          case 16:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [53] { return (new Yytoken(yytext(),yyline,\"TKN_igual\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_igual"));
            }
            // fall through
          case 68: break;
          case 17:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [57] { return (new Yytoken(yytext(),yyline,\"TKN_maior\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_maior"));
            }
            // fall through
          case 69: break;
          case 18:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [94] { return (new Yytoken(yytext(),yyline,\"TKN_identificador\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_identificador"));
            }
            // fall through
          case 70: break;
          case 19:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [44] { return (new Yytoken(yytext(),yyline,\"TKN_abreColchetes\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_abreColchetes"));
            }
            // fall through
          case 71: break;
          case 20:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [45] { return (new Yytoken(yytext(),yyline,\"TKN_fechaColchetes\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_fechaColchetes"));
            }
            // fall through
          case 72: break;
          case 21:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [46] { return (new Yytoken(yytext(),yyline,\"TKN_abreChaves\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_abreChaves"));
            }
            // fall through
          case 73: break;
          case 22:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [60] { return (new Yytoken(yytext(),yyline,\"TKN_barraVertical\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_barraVertical"));
            }
            // fall through
          case 74: break;
          case 23:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [47] { return (new Yytoken(yytext(),yyline,\"TKN_fechaChaves\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_fechaChaves"));
            }
            // fall through
          case 75: break;
          case 24:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [56] { return (new Yytoken(yytext(),yyline,\"TKN_menorOuIgual\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_menorOuIgual"));
            }
            // fall through
          case 76: break;
          case 25:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [54] { return (new Yytoken(yytext(),yyline,\"TKN_diferente\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_diferente"));
            }
            // fall through
          case 77: break;
          case 26:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [58] { return (new Yytoken(yytext(),yyline,\"TKN_maiorOuIgual\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_maiorOuIgual"));
            }
            // fall through
          case 78: break;
          case 27:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [85] { return (new Yytoken(yytext(),yyline,\"TKN_associaVetorATipo\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_associaVetorATipo"));
            }
            // fall through
          case 79: break;
          case 28:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [68] { return (new Yytoken(yytext(),yyline,\"TKN_se\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_se"));
            }
            // fall through
          case 80: break;
          case 29:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [102] { if (--comment_count == 0) yybegin(YYINITIAL); }");
            { if (--comment_count == 0) yybegin(YYINITIAL);
            }
            // fall through
          case 81: break;
          case 30:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [101] { comment_count++; }");
            { comment_count++;
            }
            // fall through
          case 82: break;
          case 31:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [97] { return (new Yytoken(yytext(),yyline,\"TKN_tipoReal\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_tipoReal"));
            }
            // fall through
          case 83: break;
          case 32:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [74] { return (new Yytoken(yytext(),yyline,\"TKN_ate\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_ate"));
            }
            // fall through
          case 84: break;
          case 33:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [89] { return (new Yytoken(yytext(),yyline,\"TKN_terminaBloco\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_terminaBloco"));
            }
            // fall through
          case 85: break;
          case 34:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [72] { return (new Yytoken(yytext(),yyline,\"TKN_faca\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_faca"));
            }
            // fall through
          case 86: break;
          case 35:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [77] { return (new Yytoken(yytext(),yyline,\"TKN_leia\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_leia"));
            }
            // fall through
          case 87: break;
          case 36:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [75] { return (new Yytoken(yytext(),yyline,\"TKN_pare\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_pare"));
            }
            // fall through
          case 88: break;
          case 37:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [93] { return (new Yytoken(yytext(),yyline,\"TKN_tipoVariavel\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_tipoVariavel"));
            }
            // fall through
          case 89: break;
          case 38:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [69] { return (new Yytoken(yytext(),yyline,\"TKN_entao\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_entao"));
            }
            // fall through
          case 90: break;
          case 39:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [67] { return (new Yytoken(yytext(),yyline,\"TKN_resto\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_resto"));
            }
            // fall through
          case 91: break;
          case 40:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [70] { return (new Yytoken(yytext(),yyline,\"TKN_senao\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_senao"));
            }
            // fall through
          case 92: break;
          case 41:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [84] { return (new Yytoken(yytext(),yyline,\"TKN_declaraVetor\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_declaraVetor"));
            }
            // fall through
          case 93: break;
          case 42:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [81] { return (new Yytoken(yytext(),yyline,\"TKN_declarafuncao\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_declarafuncao"));
            }
            // fall through
          case 94: break;
          case 43:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [88] { return (new Yytoken(yytext(),yyline,\"TKN_iniciaBloco\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_iniciaBloco"));
            }
            // fall through
          case 95: break;
          case 44:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [73] { return (new Yytoken(yytext(),yyline,\"TKN_repita\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_repita"));
            }
            // fall through
          case 96: break;
          case 45:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [78] { return (new Yytoken(yytext(),yyline,\"TKN_escreva\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_escreva"));
            }
            // fall through
          case 97: break;
          case 46:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [76] { return (new Yytoken(yytext(),yyline,\"TKN_continua\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_continua"));
            }
            // fall through
          case 98: break;
          case 47:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [71] { return (new Yytoken(yytext(),yyline,\"TKN_enquanto\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_enquanto"));
            }
            // fall through
          case 99: break;
          case 48:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [91] { return (new Yytoken(yytext(),yyline,\"TKN_nomeiaPrograma\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_nomeiaPrograma"));
            }
            // fall through
          case 100: break;
          case 49:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [98] { return (new Yytoken(yytext(),yyline,\"TKN_iniciaVariavel\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_iniciaVariavel"));
            }
            // fall through
          case 101: break;
          case 50:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [92] { return (new Yytoken(yytext(),yyline,\"TKN_iniciaConstante\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_iniciaConstante"));
            }
            // fall through
          case 102: break;
          case 51:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [66] { return (new Yytoken(yytext(),yyline,\"TKN_quociente\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_quociente"));
            }
            // fall through
          case 103: break;
          case 52:
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [87] { return (new Yytoken(yytext(),yyline,\"TKN_declaraProcedimento\")); }");
            { return (new Yytoken(yytext(),yyline,"TKN_declaraProcedimento"));
            }
            // fall through
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Yylex [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Yylex scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Yylex(reader);
          do {
            System.out.println(scanner.yylex());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
